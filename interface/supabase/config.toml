project_id = "note-buddy"

[api]
enabled = true
port = 54321
schemas = ["public", "graphql_public"]
extra_search_path = ["public", "extensions"]
max_rows = 1000

[db]
port = 54322
shadow_port = 54320
major_version = 15

[db.pooler]
enabled = false
port = 54329
pool_mode = "transaction"
default_pool_size = 20
max_client_conn = 100

[realtime]
enabled = true
# ip_version = "IPv6" # (default: "IPv4")
# max_header_length = 4096 # (default: 4096)

[studio]
enabled = true
port = 54323
api_url = "http://note-buddy.localhost"
# openai_api_key = "env(OPENAI_API_KEY)"

# Email testing server. Emails sent with the local dev setup are not actually sent - rather, they
# are monitored, and you can view the emails that would have been sent from the web interface.
[inbucket]
enabled = true
port = 54324
# smtp_port = 54325
# pop3_port = 54326

[storage]
enabled = true
file_size_limit = "50MiB"

[storage.image_transformation]
enabled = true

[auth]
enabled = true
site_url = "env(NEXT_PUBLIC_SITE_URL)"
# additional_redirect_urls = ["env(NEXT_PUBLIC_SITE_URL)", "env(NEXT_PUBLIC_AUTH_CALLBACK_URL)"]
jwt_expiry = 3600 # 1 hour (default: 3600)

# If disabled, the refresh token will never expire.
enable_refresh_token_rotation = true
# Allows refresh tokens to be reused after expiry, up to the specified interval in seconds.
refresh_token_reuse_interval = 10

enable_signup = true
enable_anonymous_sign_ins = false
enable_manual_linking = false

[auth.email]
enable_signup = true
# If enabled, a user will be required to confirm any email change on both the old, and new email
# addresses. If disabled, only the new email is required to confirm.
double_confirm_changes = false
enable_confirmations = false
max_frequency = "45s"

# [auth.email.template.invite]
# subject = "You have been invited"
# content_path = "./supabase/templates/invite.html"

[auth.sms]
enable_signup = false
enable_confirmations = false
template = "Your code is {{ .Code }} ."
max_frequency = "90s"

# Use pre-defined map of phone number to OTP for testing.
# [auth.sms.test_otp]
# 4152127777 = "123456"

# This hook runs before a token is issued and allows you to add additional claims based on the authentication method used.
# [auth.hook.custom_access_token]
# enabled = true
# uri = "pg-functions://<database>/<schema>/<hook_name>"

# Configure one of the supported SMS providers:
# `twilio`, `twilio_verify`, `messagebird`, `textlocal`, `vonage`.
# [auth.sms.twilio]
# enabled = false
# account_sid = ""
# message_service_sid = ""
# auth_token = "env(SUPABASE_AUTH_SMS_TWILIO_AUTH_TOKEN)"

# Use an external OAuth provider. The full list of providers are:
# `apple`, `azure`, `bitbucket`, `discord`, `facebook`, `github`, `gitlab`, `google`,
# `keycloak`, `linkedin_oidc`, `notion`, `twitch`, `twitter`, `slack`, `spotify`, `workos`, `zoom`.
[auth.external.discord]
enabled = false
client_id = "env(DISCORD_CLIENT_ID)"
secret = "env(DISCORD_CLIENT_SECRET)"
redirect_uri = "env(NEXT_PUBLIC_AUTH_CALLBACK_URL)"

[edge_runtime]
enabled = true
# Configure one of the supported request policies: `oneshot`, `per_worker`.
# Use `oneshot` for hot reload, or `per_worker` for load testing.
policy = "oneshot"
inspector_port = 8083

[analytics]
enabled = false
port = 54327
vector_port = 54328
# Configure one of the supported backends: `postgres`, `bigquery`.
backend = "postgres"

# [experimental]
# orioledb_version = ""
# s3_host = "env(S3_HOST)"
# s3_region = "env(S3_REGION)"
# s3_access_key = "env(S3_ACCESS_KEY)"
# s3_secret_key = "env(S3_SECRET_KEY)"
